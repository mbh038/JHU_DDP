rm(list=ls())
#load Alzheimer's data
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testinga<-testing
testinga$diagnosis<-as.numeric(testing$diagnosis)-1
# Build three different models
set.seed(62433)
mod1 <- train(diagnosis ~.,method="gbm",data=training)
mod2 <- train(diagnosis ~.,method="rf",data=training)
mod3 <- train(diagnosis ~.,method="lda",data=training)
#Stack the predictions together using random forests ("rf").
# What is the resulting accuracy on the test set?
# Is it better or worse than each of the individual predictions?
# Predict on the testing set
pred1 <- predict(mod1,testing)
pred2 <- predict(mod2,testing)
pred3 <- predict(mod3,testing)
# Accuracies of each model
ctmod1_test<-table(testing$diagnosis, pred1)
accuracy_mod1<-sum(diag(ctmod1_test))/sum(ctmod1_test)
accuracy_mod1
ctmod2_test<-table(testing$diagnosis, pred2)
accuracy_mod2<-sum(diag(ctmod2_test))/sum(ctmod2_test)
accuracy_mod2
ctmod3_test<-table(testing$diagnosis, pred3)
accuracy_mod3<-sum(diag(ctmod3_test))/sum(ctmod3_test)
accuracy_mod3
# stack the models
dfStack<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
#fit a model using rf that combines the predictors
set.seed(62433)
combModFit <- train(diagnosis ~.,method="rf",
data=dfStack)
combPred <- predict(combModFit,dfStack)
# combined accuracy
ct_comb<-table(testing$diagnosis, combPred)
accuracy_comb<-sum(diag(ct_comb))/sum(ct_comb)
accuracy_comb
accuracy_mod1
accuracy_mod2
accuracy_mod3
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/shiny-examples/063-superzip-example')
library(leaflet)
library(raster)
adm <- getData('GADM', country='GBR', level=2)
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=adm, weight = 2, fillColor = "red", popup=popup)
str(adm)
adm
names(adm)
adm$OBJECTID
adm$NAME_1
adm$NAME_2
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall<-adm[adm$NAME_2==Cornwall]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=adm, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall<-adm[adm$NAME_2=="Cornwall"]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=adm, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall<-adm[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=adm, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall<-adm[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=cornwall, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)[adm$NAME_2=="Cornwall",]
#cornwall<-adm[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=adm, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
cornwall <- getData('GADM', country='GBR', level=2)[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=cornwall, weight = 2, fillColor = "red", popup=popup)
rm(list=ls())
library(leaflet)
library(raster)
library(ggplot2)
cornwall <- getData('GADM', country='GBR', level=2)[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=cornwall, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=cornwall, weight = 2, fillColor = "red", popup=popup)
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
rm(list=ls())
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
addTiles() %>%
addPolygons(data=cornwall, weight = 2, fillColor = "red", popup=popup)
library(leaflet)
library(raster)
library(ggplot2)
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
popup <- paste0("<strong>Name: </strong>",
adm$NAME_2)
leaflet() %>%
#addTiles() %>%
addPolygons(data=cornwall, weight = 2, fillColor = "red", popup=popup)
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
?leaflet
?addTiles
?leafletProxy
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
install.packages("Imap")
library(Imap)
?inside.polygon
cornwall<-fortify(cornwall)
str(cornwall)
inside.polygon(c(4,50),corn[,1:2])
inside.polygon(c(4,50),cornwall[,1:2])
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
?addPolygons
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
?tabPanel
?div
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
?lm
?ln
?log
# Set up x and y values. Note as defined the slope of the
# regression should be close to one (save for the "noise"
added to the y values) and the intercept should be close to
four.
x<-0:10
y<-x+4+rnorm(11,0,1)
plot(x,y)
title("Original data")
# Fit a "normal" regression line to the data and display
# the regression line on the scatter plot
fitNormalReg<-lm(y~x)
abline(fitNormalReg)
# Fit a regression line in which the intercept has been
# forced to be zero and display the line on the scattter
# plot.
fitZeroInt<-lm(y~-1+x)
abline(fitZeroInt,lty=2)
# Compare fits.
summary(fitNormalReg)
summary(fitZeroInt)
# There is a statistically significant difference
# between the models - the model with and intercetpt,
# the "normal" regression is the better fit.
anova(fit1,fit2)
fitZeroInt[1]
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
rm(list=ls())
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
hv<-c(10,25,45)
hv<-hv/hv[1]
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
selectedid2 <-as.vector(windSpeeds[windSpeeds$id==id,])
str(windSpeeds)
selectedid2 <-as.vector(windSpeeds[windSpeeds$id==id,])
id=24
selectedid2 <-as.vector(windSpeeds[windSpeeds$id==id,])
selectedid2
selectedid2[4:6]
h<-c(10,25,45)
selectedid2[4:6]/h[1]
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
id=24
selectedid2 <-as.vector(windSpeeds[windSpeeds$id==id,])
selectedid2[4:6]/h[1]
log(selectedid2[4:6]/h[1])
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
rm(list=ls())
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
rm(list=ls())
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
hv<-c(10,25,45)
ws<-c(4,6,8)
wsAdj<-function(height,hVector,wsVector){
hlog<-log(hVector/hVector[1])
wslog<-log(wsVector/wsVector[1])
fit<-lm(wslog~-1+hlog)
wsVector[1]*(height/hVector[1])^fit[1]
}
wsAdj(15,hv,ws)
hlog<-log(hv/hv[1])
wslog<-log(ws/ws[1])
fit<-lm(wslog~-1+hlog)
fit[1]
class(fit[1])
fit[[1]]
class(fir[[1]])
class(fit[[1]])
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
selectedid <-as.vector(windSpeeds[windSpeeds$id==24,])
wsVector<-selectedid[4:6]
wsVector
class(wsVector)
class(selectedid[[4:6]])
selectedid[[4:6]]
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
fit
fit[[1]]
fit[[1]]*2
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
wsVector <-as.vector(windSpeeds[windSpeeds$id==id,4:6])
id=45
wsVector <-as.vector(windSpeeds[windSpeeds$id==id,4:6])
class(wsVector)
class(as.vector(wsVector))
class (c(10,25,45))
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
?clearShapes
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
rm(list=ls())
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addTiles() %>% addCircles()
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet() %>% addTiles() %>% addCircles(data=df)
?navbarPage
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project')
devtools::install_github('muschellij2/slidify')
library(slidify)
library("stringr", lib.loc="\\\\cam-stf-fs1/users/michael.hunt/my documents/R/win-library/3.2")
install.packages(c("car", "CORElearn", "dplyr", "jsonlite", "quantreg", "raster", "sp", "tidyr", "xml2"))
# install slidify
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install.packages("devtools")
library(devtools)
install.packages("devtools")
# install slidify
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
install_github('ramnathv/slidify')
library(devtools)
install.packages("devtools")
library(devtools)
library(stringr)
install.packages("devtools")
library(devtools)
require(devtools)
install.packages(c('devtools','xml2'))
library(devtools)
install.packages("Rtools")
library(slidify)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
devtools::install_github('rstudio/shinyapps')
find_rtools()
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
rm(list=ls())
## Skip this line if you are the OP, and substitute the real data instead.
data<-data.frame(LATITUDE=runif(100,1,100),LONGITUDE=runif(100,1,100));
## Add the latitudes and longitudes between which each observation is located
## You can substitute any number of breaks you want. Or, a vector of fixed cutpoints
## LATgrid and LONgrid are going to be factors. With ugly level names.
data$LATgrid<-cut(data$LATITUDE,breaks=10,include.lowest=T);
data$LONgrid<-cut(data$LONGITUDE,breaks=10,include.lowest=T);
## Create a single factor that gives the lat,long of each observation.
data$IDgrid<-with(data,interaction(LATgrid,LONgrid));
## Now, create another factor based on the above one, with shorter IDs and no empty levels
data$IDNgrid<-factor(data$IDgrid);
levels(data$IDNgrid)<-seq_along(levels(data$IDNgrid));
## If you want total grid-cell count repeated for each observation falling into that grid cell, do this:
data$count<- ave(data$LATITUDE,data$IDNgrid,FUN=length);
## You could have also used data$LONGITUDE, doesn't matter in this case
## If you want just a table of counts at each grid-cell, do this:
aggregate(data$LATITUDE,data[,c('LATgrid','LONgrid','IDNgrid')],FUN=length);
## I included the LATgrid and LONgrid vectors so there would be some
## sort of descriptive reference accompanying the anonymous numbers in IDNgrid,
## but only IDNgrid is actually necessary
## If you want a really minimalist table, you could do this:
table(data$IDNgrid);
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
?readOGR
??readOGR
install.packages("rgdal")
library(rgdal)
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
windSpeeds<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
coordinates(windSpeeds)=c("lon","lat")
#Get shapefile of the species' range map
range=readOGR(".",layer="windSpeeds")
proj4string(windSpeeds)=proj4string(range)
#Get points within the range map
inside.range=!is.na(over(windSpeeds,as(range,"SpatialPolygons")))
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
rm(list=ls())
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
shiny::runApp('H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny')
wspoly<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
coordinates(wspoly)=c("lon","lat")
#Get shapefile of the species' range map
range=readOGR(".",layer="wspoly")
proj4string(wspoly)=proj4string(range)
wspoly<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
coordinates(wspoly)=c("lon","lat")
#Get shapefile of the species' range map
range=readOGR(".",layer="wspoly")
wspoly<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
setwd("H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny")
wspoly<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
coordinates(wspoly)=c("lon","lat")
#Get shapefile of the species' range map
range=readOGR(".",layer="wspoly")
proj4string(wspoly)=proj4string(range)
wspoly<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
coordinates(wspoly)=c("lon","lat")
range=readOGR(".",layer="wspoly")
