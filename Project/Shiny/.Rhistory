murders = read.csv("./data/murders.csv")
str(murders)
# Load the map of the US
statesMap = map_data("state")
worldMap = map_data("world")
str(statesMap)
# Plot the map:
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
ggplot(worldMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
# Create a new variable called region with the lowercase names to match the statesMap:
murders$region = tolower(murders$State)
# Join the statesMap data and the murders data into one dataframe:
murderMap = merge(statesMap, murders, by="region")
str(murderMap)
# Plot the number of murder on our map of the United States:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Plot a map of the population:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Create a new variable that is the number of murders per 100,000 population:
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
# Redo our plot with murder rate:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Redo the plot, removing any states with murder rates above 10:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
# QQ - gun ownership rate
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# VIDEO 5 - Maps
# Install and load two new packages:
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggmap)
# Load a map of Chicago into R:
chicago = get_map(location = "chicago", zoom = 11)
london=get_map(location="london",zoom=11)
# Look at the map
ggmap(chicago)
ggmap(london)
# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
# QQ
LatLonCounts2=LatLonCounts[LatLonCounts$Freq>0,]
nrow(LatLonCounts)
nrow(LatLonCounts2)
library(maps)
library(ggmap)
# Load a map of Chicago into R:
chicago = get_map(location = "chicago", zoom = 11)
london=get_map(location="london",zoom=11)
# Look at the map
ggmap(chicago)
ggmap(london)
# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
# QQ
LatLonCounts2=LatLonCounts[LatLonCounts$Freq>0,]
nrow(LatLonCounts)
nrow(LatLonCounts2)
setwd("H:/Rspace/MIT_AE/Unit7 Visualisation")
library(maps)
library(ggmap)
# Load a map of Chicago into R:
chicago = get_map(location = "chicago", zoom = 11)
london=get_map(location="london",zoom=11)
# Look at the map
ggmap(chicago)
ggmap(london)
# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
# QQ
LatLonCounts2=LatLonCounts[LatLonCounts$Freq>0,]
nrow(LatLonCounts)
nrow(LatLonCounts2)
mvt = read.csv("./data/mvt.csv", stringsAsFactors=FALSE)
library(maps)
library(ggmap)
# Load a map of Chicago into R:
chicago = get_map(location = "chicago", zoom = 11)
london=get_map(location="london",zoom=11)
# Look at the map
ggmap(chicago)
ggmap(london)
# Plot the first 100 motor vehicle thefts:
ggmap(chicago) + geom_point(data = mvt[1:100,], aes(x = Longitude, y = Latitude))
# Round our latitude and longitude to 2 digits of accuracy, and create a crime counts data frame for each area:
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
str(LatLonCounts)
# Convert our Longitude and Latitude variable to numbers:
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
# Plot these points on our map:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq))
# Change the color scheme:
ggmap(chicago) + geom_point(data = LatLonCounts, aes(x = Long, y = Lat, color = Freq, size=Freq)) + scale_colour_gradient(low="yellow", high="red")
# We can also use the geom_tile geometry
ggmap(chicago) + geom_tile(data = LatLonCounts, aes(x = Long, y = Lat, alpha = Freq), fill="red")
# QQ
LatLonCounts2=LatLonCounts[LatLonCounts$Freq>0,]
nrow(LatLonCounts)
nrow(LatLonCounts2)
ggmap(chicago) + geom_contour()
g
ggmap(chicago) + geom_contour(aes(x = Long, y = Lat,z=Freq))
ggmap(chicago) + geom_contour(data=LatLonCounts,aes(x = Long, y = Lat,z=Freq))
ggmap(chicago) + geom_contour(data=LatLonCounts,aes(x = Long, y = Lat,z=Freq),fill=Freq)
setwd("H:/Rspace/JHU_Data_Science/JHU_DDP/Project")
# Load the packages
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
windSpeeds<-read.csv("./datawindspeeds.csv")
windSpeeds<-read.csv("./data/windspeeds.csv")
coords <- cbind(easting = as.numeric(as.character(windSpeeds$easting)),
northing = as.numeric(as.character(windSpeeds$northing)))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,windSpeeds$ws25,windSpeeds$ws45,
windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,windSpeeds$ws25,windSpeeds$ws45,windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
coords <- cbind(easting = as.numeric(as.character(windSpeeds$easting)),northing = as.numeric(as.character(windSpeeds$northing)))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,windSpeeds$ws25,windSpeeds$ws45,windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
# load data
windSpeeds<-read.csv("./data/windspeeds.csv")
# Create coordinates variable
coords <- cbind(easting = as.numeric(as.character(windSpeeds$easting)),northing = as.numeric(as.character(windSpeeds$northing)))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
coords <- cbind(Easting = as.numeric(as.character(windSpeeds$easting)),Northing = as.numeric(as.character(windSpeeds$northing)))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,), proj4string = CRS("+init=epsg:27700"))
?SpatialPointsDataFrame
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,), coords.nrs=c(6:8),proj4string = CRS("+init=epsg:27700"))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,), coords.nrs=c(6:8),proj4string = CRS("+init=epsg:27700"))
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
plot(ws_SP)
head(ws_SP@coords)
ws_SP_LL <- spTransform(ws_SP, CRS(latlong))
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "Longitude"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "Latitude"
head(ws_SP_LL@coords)
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "lng"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "lat"
head(ws_SP_LL@coords)
head(ws_SP_LL@coords)
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "lng"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "lat"
head(ws_SP_LL@coords)
plot(ws_SP_LL@coords)
plot(ws_SP_LL@coords)
str(ws_SP)
plot(ws_SP)
ws_L <- SpatialLinesDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
?SpatialLinesDataFrame
rm(list=ls())
# Load the packages
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
# load data
windSpeeds<-read.csv("./data/windspeeds.csv")
# Create coordinates variable
coords <- cbind(Easting = as.numeric(as.character(windSpeeds$easting)),Northing = as.numeric(as.character(windSpeeds$northing)))
# Create the SpatialPointsDataFrame
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
# quick plot
plot(ws_SP)
# where are the easting and northing coordinates?
head(ws_SP@coords)
# project to latitude and longitude
# Convert from Eastings and Northings to Latitude and Longitude
ws_SP_LL <- spTransform(ws_SP, CRS(latlong))
# Rename the columns
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "lng"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "lat"
head(ws_SP_LL@coords)
plot(ws_SP_LL@coords)
library(sp)
library(KernSmooth)
library(RColorBrewer)
x = as(SpatialPixelsDataFrame(ws_SP_LL, ws_SP_LL at data, tolerance=.00086),
"SpatialPolygonsDataFrame")
spplot(x[2])
?SpatialPixelsDataFrame
x = as(SpatialPixelsDataFrame(ws_SP, ws_SP),"SpatialPolygonsDataFrame")
spplot(x[2])
setwd("H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny")
shiny::runApp()
rm(list=ls())
# Load the packages
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
# load data
windSpeeds<-read.csv("./data/windspeeds.csv")
# Create coordinates variable
coords <- cbind(Easting = as.numeric(as.character(windSpeeds$easting)),Northing = as.numeric(as.character(windSpeeds$northing)))
# Create the SpatialPointsDataFrame
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
# quick plot
plot(ws_SP)
# where are the easting and northing coordinates?
head(ws_SP@coords)
# project to latitude and longitude
# Convert from Eastings and Northings to Latitude and Longitude
ws_SP_LL <- spTransform(ws_SP, CRS(latlong))
# Rename the columns
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "lng"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "lat"
head(ws_SP_LL@coords)
plot(ws_SP_LL@coords)
library(sp)
library(KernSmooth)
library(RColorBrewer)
x = as(SpatialPixelsDataFrame(ws_SP@coords, ws_SP),"SpatialPolygonsDataFrame")
spplot(x[2])
str(ws_SP)
setwd("H:/Rspace/JHU_Data_Science/JHU_DDP/Project")
# Load the packages
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
# load data
windSpeeds<-read.csv("./data/windspeeds.csv")
# Create coordinates variable
coords <- cbind(Easting = as.numeric(as.character(windSpeeds$easting)),Northing = as.numeric(as.character(windSpeeds$northing)))
# Create the SpatialPointsDataFrame
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
# quick plot
plot(ws_SP)
# where are the easting and northing coordinates?
head(ws_SP@coords)
# project to latitude and longitude
# Convert from Eastings and Northings to Latitude and Longitude
ws_SP_LL <- spTransform(ws_SP, CRS(latlong))
# Rename the columns
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "lng"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "lat"
head(ws_SP_LL@coords)
plot(ws_SP_LL@coords)
library(sp)
library(KernSmooth)
library(RColorBrewer)
str(ws_SP)
SpatialLinesDataFrame
?SpatialLinesDataFrame
?bke2d
library(sp)
library(KernSmooth)
library(RColorBrewer)
?bke2d
?bked2d
?bkde2d
library(leaflet)
?bkde2d
library(leafletR)
install.packages("leafletR")
library(leafletR)
?bkde2d
bkde2D
?bkde2D
head(ws_SP@coords)
d2d = bkde2D(ws_SP@coords,bandwidth=c(1000,1000))
head(d2d)
str(d2d)
contour(d2d$x1,d2d$x2,d2d$fhat)
?contour
?spplot
as(SpatialPolygonsDataFrame(ws_SP))
as(SpatialPolygonsDataFrame(ws_SP),"SpatialPolygonsDataFrame")
as(SpatialPixelsDataFrame(ws_SP),"SpatialPolygonsDataFrame")
as(SpatialPointsDataFrame(ws_SP),"SpatialPolygonsDataFrame")
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
str(cornwall)
class(cornwall)
# Load the packages
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
# load data
windSpeeds<-read.csv("./data/windspeeds.csv")
# Create coordinates variable
coords <- cbind(Easting = as.numeric(as.character(windSpeeds$easting)),Northing = as.numeric(as.character(windSpeeds$northing)))
# Create the SpatialPointsDataFrame
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
class(ws_SP)
str(ws_SP)
plot(ws_SP)
plot(ws_SP@coords)
plot(ws_SP@coords[100,])
plot(ws_SP@coords[1000,])
plot(ws_SP@coords[1000,1])
plot(ws_SP@coords[1000])
plot(ws_SP@coords[2000])
plot(ws_SP@coords[3000])
plot(ws_SP@coords[3000,])
str(ws_SP@coords)
plot(ws_SP@coords[1:100])
plot(ws_SP@coords[1:1000])
2
plot(ws_SP@coords[1:2000])
plot(ws_SP@coords[1:3000])
plot(ws_SP@coords[1:4000])
rm(list=ls())
# Load the packages
library(rgdal)
# Variables for holding the coordinate system types (see:
# http://www.epsg.org/ for details)
ukgrid = "+init=epsg:27700"
latlong = "+init=epsg:4326"
# load data
windSpeeds<-read.csv("./data/windspeeds.csv")
# Create coordinates variable
coords <- cbind(Easting = as.numeric(as.character(windSpeeds$easting)),Northing = as.numeric(as.character(windSpeeds$northing)))
# Create the SpatialPointsDataFrame
ws_SP <- SpatialPointsDataFrame(coords, data = data.frame(windSpeeds$ws10,
windSpeeds$ws45,
windSpeeds$ws45,
windSpeeds$id,coords.nrs=c(6:8)) ,proj4string = CRS("+init=epsg:27700"))
# quick plot
plot(ws_SP@coords)
# where are the easting and northing coordinates?
head(ws_SP@coords)
# project to latitude and longitude
# Convert from Eastings and Northings to Latitude and Longitude
ws_SP_LL <- spTransform(ws_SP, CRS(latlong))
# Rename the columns
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Easting"] <- "lng"
colnames(ws_SP_LL@coords)[colnames(ws_SP_LL@coords) == "Northing"] <- "lat"
head(ws_SP_LL@coords)
plot(ws_SP_LL@coords)
plot(ws_SP@coords)
plot(ws_SP_LL@coords)
plot(ws_SP@coords)
ws<-as.data.frame(ws_SP@coords)
plot(ws)
plot(ws)
str(ws)
plot(ws[1:100,])
plot(ws[1:1000,])
plot(ws[1000,])
plot(ws[1000:1010,])
5
plot(ws[1000:1050,])
?lapply
contour(windSpeeds$lng,windSpeeds$lat,windSpeeds$ws45)
?contour
library(ggplot)
library(ggplot2)
ggplot(data=windSpeeds,aes(x=lng,y=lat,z=ws45))
ggplot(data=windSpeeds,aes(x=lng,y=lat,z=ws45))+geom_contour
ggplot(data=windSpeeds,aes(x=lng,y=lat,z=ws45))+geom_contour()
ggplot(data=windSpeeds,aes(x=lon,y=lat,z=ws45))+geom_contour()
ggplot(data=windSpeeds,aes(x=lon,y=lat))+geom_polygon()
rm(list=ls())
ibrary(sp)
library(lattice) # required for trellis.par.set():
trellis.par.set(sp.theme()) # sets color ramp to bpy.colors()
data(meuse)
coordinates(meuse)=~x+y
data(meuse.riv)
meuse.sr = SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)),"meuse.riv")))
rv = list("sp.polygons", meuse.sr, fill = "lightblue")
## multi-panel plot, scales + north arrow only in last plot:
## using the "which" argument in a layout component
## (if which=4 was set as list component of sp.layout, the river
## would as well be drawn only in that (last) panel)
scale = list("SpatialPolygonsRescale", layout.scale.bar(),
offset = c(180500,329800), scale = 500, fill=c("transparent","black"), which = 4)
text1 = list("sp.text", c(180500,329900), "0", cex = .5, which = 4)
text2 = list("sp.text", c(181000,329900), "500 m", cex = .5, which = 4)
arrow = list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(181300,329800),
scale = 400, which = 4)
cuts = c(.2,.5,1,2,5,10,20,50,100,200,500,1000,2000)
spplot(meuse, c("cadmium", "copper", "lead", "zinc"), do.log = TRUE,
key.space = "right", as.table = TRUE,
sp.layout=list(rv, scale, text1, text2, arrow), # note that rv is up front!
main = "Heavy metals (top soil), ppm", cex = .7, cuts = cuts)
str(meuse)
str(meuse.riv)
rm(list=ls())
library(sp)
library(lattice) # required for trellis.par.set():
trellis.par.set(sp.theme()) # sets color ramp to bpy.colors()
data(meuse)
str(meuse)
coordinates(meuse)=~x+y
str(meuse)
class(meuse)
data(meuse.riv)
?meuse.riv
head(meuse.riv)
meuse.sr = SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)),"meuse.riv")))
str(meuse.sr)
rv = list("sp.polygons", meuse.sr, fill = "lightblue")
str(rv)
class(rv)
setwd("H:/Rspace/JHU_Data_Science/JHU_DDP/Project")
windSpeeds<-read.csv("./data/windspeeds.csv")
coordinates(windSpeeds)=~Easting+Northing
coordinates(windSpeeds)=~easting+northing
spplot(windSpeeds)
spplot(windSpeeds,c("ws10","ws25"))
spplot(windSpeeds,c("ws10","ws25","ws45"))
spplot(windSpeeds,c("ws10","ws45"))
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
?addPolygons
windSpeeds<-read.csv("../data/windspeeds.csv",stringsAsFactors=FALSE)
windspeedsSPDF<-coordinates(windSpeeds)=~easting+northing
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
rm(list=ls())
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
shiny::runApp('Shiny')
setwd("H:/Rspace/JHU_Data_Science/JHU_DDP/Project/Shiny")
shiny::runApp()
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
shiny::runApp()
shiny::runApp()
