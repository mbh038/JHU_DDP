?plot.enet
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
?observe
?ncol
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
?addRectangles
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
?getMapData
??getMapData
library(leaflet)
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
?contour
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
library(sp)
?spTransform
library(rgdal)
?coordinates
coordinates(windSpeeds)=~lon+lat
dat2<-spTransform(windSpeeds)
p4 = "+proj=lcc +lat_1=50  +lat_2=50 +lat_0=0  +lon_0=253 +x_0=0  +y_0=0"
dat2<-spTransform(windSpeeds,CRS(p4))
proj4string(windSpeeds)=CRS("+init=epsg:4326")
dat2<-spTransform(windSpeeds,CRS(p4))
bb=bbox(dat2)
lonx=seq(bb[1,1],  bb[1,2],len=277)
laty=seq(bb[2,1], bb[2,2],len=349)
r=raster(list(x=laty,y=lonx,z=md))
plot(r)
contour(r,add=TRUE)
bb=bbox(dat2)
lonx=seq(bb[1,1],  bb[1,2],len=277)
laty=seq(bb[2,1], bb[2,2],len=349)
r=raster(list(x=laty,y=lonx,z=ws10))
plot(r)
contour(r,add=TRUE)
bb=bbox(dat2)
lonx=seq(bb[1,1],  bb[1,2],len=277)
laty=seq(bb[2,1], bb[2,2],len=349)
r=raster(list(x=laty,y=lonx,z=ws))
plot(r)
contour(r,add=TRUE)
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
coordinates(windSpeeds)=~lon+lat
dat2<-spTransform(windSpeeds)
proj4string(windSpeeds)=CRS("+init=epsg:4326")
dat2<-spTransform(windSpeeds,CRS(p4))
dat2<-fortify(dat2)
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
rm(dat2)
rm(laty,latx)
rm(lonx)
rm(bb)
rm(p4)
?addRasterImage
?addRectangles
addPolygons(map, lng = NULL, lat = NULL, layerId = NULL, group = NULL, stroke = TRUE,
color = "#03F", weight = 5, opacity = 0.5, fill = TRUE, fillColor = color,
fillOpacity = 0.2, dashArray = NULL, smoothFactor = 1, noClip = FALSE,
popup = NULL, options = pathOptions(), data = getMapData(map))
SPDF = SpatialPolygonsDataFrame(SPs, data.frame(N = c("one", "two"), row.names = c("a", "b")))
?SpatialPolygonsDataFrame
dat<-windSpeeds
coordinates(dat)=~lon+lat
proj4string(dat)=CRS("+init=epsg:4326")
dat2=spTransform(dat,CRS(p4))
p4 = "+proj=lcc +lat_1=50  +lat_2=50 +lat_0=0  +lon_0=253 +x_0=0  +y_0=0"
coordinates(dat)=~lon+lat
proj4string(dat)=CRS("+init=epsg:4326")
dat2=spTransform(dat,CRS(p4))
dat<-windSpeeds
coordinates(dat)=~lon+lat
proj4string(dat)=CRS("+init=epsg:4326")
dat2=spTransform(dat,CRS(p4))
?addPolygons
dat<-windSpeeds
coordinate(data)=~lon+lat
coordinates(dat)=~lon+lat
latlong = "+init=epsg:4326"
dat2=spTransform(dat,CRS(latlong))
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
unique(powerCurves[powerCurves$turbine=="E3120",powerCurves$hmin])
powerCurves[powerCurves$turbine=="E3120",powerCurves$hmin]
powerCurves[,powerCurves$hmin]
powerCurves[,hmin]
powerCurves[,2]
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
rm(list=ls())
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
?sprintf
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
devtool::install_github("rstudio/shiny")
install.packages("devtool")
library(devtools)
devtool::install_github("rstudio/shiny")
devtools::install_github("rstudio/shiny")
install.packages("jsonlite")
library(shiny)
install.packages("shiny")
install.packages("shiny")
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(Rcpp)
library(shiny)
install.packages("Rcpp")
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/shiny-examples/019-mathjax')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
sessionInfo
sessionInfo()
?mathjax
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(shiny)
server <- function(input, output, session) {
output$formula <- renderUI({
print("$$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$")
})
}
ui <- fluidPage(
titlePanel("Quadratic Equation Roots"),
sidebarLayout(
sidebarPanel("LaTeX: $$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$"),
mainPanel(withMathJax(uiOutput("formula")))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output, session) {
output$formula <- renderUI({
print("$$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$")
})
}
ui <- fluidPage(
titlePanel("Quadratic Equation Roots"),
sidebarLayout(
sidebarPanel("LaTeX: (enclose in $$) x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}"),
mainPanel(withMathJax(uiOutput("formula")))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output, session) {
output$formula <- renderUI({
print("$$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$")
})
}
ui <- fluidPage(
titlePanel("Quadratic Equation Roots"),
sidebarLayout(
sidebarPanel("LaTeX: (enclose in $$) x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}"),
mainPanel(withMathJax(uiOutput("formula")))
)
)
shinyApp(ui = ui, server = server)
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mbh038', token='AE8A1EFE40AA5F2D38DA81CF271A185B', secret='YDcDIbZzb242yAYVWyzEVU05qYeNszIKUoY/Dd0H')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(shinyapps)
shinyapps::deployApp('c:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(shinyapps)
shinyapps::deployApp('c:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
setwd("C:/Users/Mike/Rspace/JHU_DDP/Project/Slidify/CornwallWT")
wsAdj<-function(height,hVector,wsVector){
# height - height at which speed is to be calculated
# hVector - known heights
# ws Vector - known wind speeds
hlog<-log(hVector/hVector[1])
wslog<-log(wsVector/wsVector[1])
fit<-lm(wslog~-1+hlog)
wsVector[1]*(height/hVector[1])^fit[[1]] # returns the estimated wind speed at h=height
}
wsVector <-as.numeric(windSpeeds[windSpeeds$id==id,c("ws10","ws25","ws45")])
# estimate wind speed at selected hub height, from atlas values at 10,25 and 45 m heights.
wsp<-wsAdj(h,c(10,25,45),wsVector)
print(paste0(round(wsp,2)," m/s"))
# read in wind speed map of Cornwall taken from the UK NOABL wind speed atlas.
# wind speeds are given for 10 m, 25m and 45 m heights with 1 km2 resolution
windSpeeds<-read.csv("windspeeds.csv",stringsAsFactors=FALSE)
# get Cornwall boundary data
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
# read in wind speed map of Cornwall taken from the UK NOABL wind speed atlas.
# wind speeds are given for 10 m, 25m and 45 m heights with 1 km2 resolution
windSpeeds<-read.csv("windspeeds.csv",stringsAsFactors=FALSE)
library(leaflet)
library(htmlwidgets)
library(knitr)
# get Cornwall boundary data
library(raster)
adm <- getData('GADM', country='GBR', level=2)
cornwall=adm[adm$NAME_2=="Cornwall",]
m<-leaflet() %>%
addTiles() %>%
setView(lng = -4.7, lat = 50.4, zoom = 10)
saveWidget(m, 'cornwall.html')
cat('<iframe src="cornwall.html" STYLE="width:2000px;height:600px"> </iframe>')
wsAdj<-function(height,hVector,wsVector){
# height - height at which speed is to be calculated
# hVector - known heights
# ws Vector - known wind speeds
hlog<-log(hVector/hVector[1])
wslog<-log(wsVector/wsVector[1])
fit<-lm(wslog~-1+hlog)
wsVector[1]*(height/hVector[1])^fit[[1]] # returns the estimated wind speed at h=height
}
wsVector <-as.numeric(windSpeeds[windSpeeds$id==id,c("ws10","ws25","ws45")])
# estimate wind speed at selected hub height, from atlas values at 10,25 and 45 m heights.
wsp<-wsAdj(h,c(10,25,45),wsVector)
print(paste0(round(wsp,2)," m/s"))
For example, if a location selected were on the windy north coast, that had id=25 `r id=25`in the atlas csv file, and if a tower height of h=50 m`r h=50` had been selected, then the windspeed at that height would be found to be:
For example, if a location selected were on the windy north coast, that had id=25 `r id=25`in the atlas csv file, and if a tower height of h=50 m`r h=50` had been selected, then the windspeed at that height would be found to be:
wsAdj<-function(height,hVector,wsVector){
# height - height at which speed is to be calculated
# hVector - known heights
# ws Vector - known wind speeds
hlog<-log(hVector/hVector[1])
wslog<-log(wsVector/wsVector[1])
fit<-lm(wslog~-1+hlog)
wsVector[1]*(height/hVector[1])^fit[[1]] # returns the estimated wind speed at h=height
}
wsVector <-as.numeric(windSpeeds[windSpeeds$id==id,c("ws10","ws25","ws45")])
# estimate wind speed at selected hub height, from atlas values at 10,25 and 45 m heights.
wsp<-wsAdj(h,c(10,25,45),wsVector)
print(paste0(round(wsp,2)," m/s"))
id=25
h=50
wsVector <-as.numeric(windSpeeds[windSpeeds$id==id,c("ws10","ws25","ws45")])
# estimate wind speed at selected hub height, from atlas values at 10,25 and 45 m heights.
wsp<-wsAdj(h,c(10,25,45),wsVector)
print(paste0(round(wsp,2)," m/s"))
AEP<-function(meanv,shape=2,wsVector,powerVector){
# find scale factor, given the mean wind speed at the location
scale<-round(meanv/gamma(1+1/shape),2)
# calculate vector of wind speed probabilities
windprob<-dweibull(wsVector,shape,scale)
# average output power = sum power at each windspeed bin x probability of each wind speed bin
meanP<-sum(windprob*powerVector) # average output power = sum power at each windspeed bin x probability of each wind speed bin
round(8760*meanP,2)/1000
}
# read in wind turbine power curve data
powerCurves<-read.csv("powerCurves.csv",stringsAsFactors=FALSE)
shape<-2
selectedWTData<-subset(powerCurves,turbine==WT)[,c("v","P","cP")]
a<-AEP(ws,shape,selectedWTData$v,selectedWTData$P)
print(paste0(round(as.numeric(a),0)," MWh"))
# read in wind turbine power curve data
powerCurves<-read.csv("powerCurves.csv",stringsAsFactors=FALSE)
shape<-2
WT="Gamesa G80"
selectedWTData<-subset(powerCurves,turbine==WT)[,c("v","P","cP")]
a<-AEP(ws,shape,selectedWTData$v,selectedWTData$P)
print(paste0(round(as.numeric(a),0)," MWh"))
# read in wind turbine power curve data
powerCurves<-read.csv("powerCurves.csv",stringsAsFactors=FALSE)
shape<-2
WT="Gamesa G80"
ws=8
selectedWTData<-subset(powerCurves,turbine==WT)[,c("v","P","cP")]
a<-AEP(ws,shape,selectedWTData$v,selectedWTData$P)
print(paste0(round(as.numeric(a),0)," MWh"))
slidify("Index.Rmd")
library(slidify)
slidify("Index.Rmd")
