d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=14),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=14,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=18))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
#theme(legend.position=c(.8, .2))
d
d<-ggplot(data=tb,
aes(x=Category, y=Allocation,fill=Allocation, order=-Allocation))+
geom_bar(stat="identity")+
#facet_wrap(~variable)+
coord_flip()+
scale_y_continuous(breaks = seq(0, 50, 10))+
theme(axis.text.x = element_text(size=18),
axis.text.y=element_text(size=14))+
labs(y = "% Allocation of total training budget")+
theme(axis.title.x = element_text(size=18,vjust=-.5),
axis.title.y=element_blank())+
# theme(legend.text=element_text(size=12),
# legend.title = element_blank())+
theme(legend.position="none")
d
source('C:/Users/Mike/Rspace/RECM/thermalMass.r', echo=TRUE)
library(swirl)
swirl()
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,"date'])
)
class(hits[,"date"])
as.integer(head(hits[,"data"]))
as.integer(head(hits[,"date"]))
mdl<-glm(visits~date,family=poisson,data=hits)
summary(mdl)
exp(confint(mdl,"date"))
which.max(hits[,"visits"])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-offset=log(visits+1)
mdl2<-log(visits+1)
mdl2<-glm$offset
?
swirl()
library(swirl)
swirl()
swirl()
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
rm(list=ls())
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(adData)
rm(list=ls())
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
# adData = data.frame(diagnosis,predictors)
# testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
# training = adData[-testIndex,]
# testing = adData[testIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
# adData = data.frame(diagnosis,predictors)
# testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
# training = adData[-testIndex,]
# testing = adData[testIndex,]
# adData = data.frame(predictors)
# trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
# training = adData[trainIndex,]
# testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
# adData = data.frame(diagnosis,predictors)
# testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
# training = adData[-testIndex,]
# testing = adData[testIndex,]
# adData = data.frame(predictors)
# trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
# training = adData[trainIndex,]
# testing = adData[-trainIndex,]
# adData = data.frame(diagnosis,predictors)
# train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
# test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
str(AlzheimerDisease)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
str(AlzheimerDisease)
?AlzheimerDisease
str(AlzheimerDisease)
??AlzheimerDisease
?AppliedPredictiveModeling
scriptLocation()
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
?str(diagnosis)
str(diagnosis)
length(diagnosis)
str(predictors)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
length(testIndex)
head(testIndex,20)
summary(testIndex)
dim(testIndex)
class(testIndex)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histy(superPlasticizer)
hist(superPlasticizer)
hist(training$superPlasticizer)
hist(training$SuperPlasticizer)
str(mixtures)
hist(training$Superplasticizer)
summary(training$Superplasticizer)
table(training$Superplasticizer)
logmixtures<-log(mixtures$Superplastizer+1)
hist(logmixtures)
str(logmixtures)
logmixtures<-log(mixtures$Superplasticizer+1)
hist(logmixtures)
summary(logmixtures)
?predict
## Why preprocess?
```{r loadPackage,cache=TRUE,fig.height=3.5,fig.width=3.5}
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
```
---
## Why preprocess?
```{r ,dependson="loadPackage",cache=TRUE,fig.height=3.5,fig.width=3.5}
mean(training$capitalAve)
sd(training$capitalAve)
```
---
## Standardizing
```{r ,dependson="loadPackage",cache=TRUE,fig.height=3.5,fig.width=3.5}
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
```
---
## Standardizing - test set
```{r ,dependson="loadPackage",cache=TRUE,fig.height=3.5,fig.width=3.5}
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
```
---
## Standardizing - _preProcess_ function
```{r preprocess,dependson="loadPackage",cache=TRUE,fig.height=3.5,fig.width=3.5}
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
str(preObj)
?preProcess
str(training[,-58])
summary(preObj$mean)
length(preObj$mean)
summary(trainCapAveS)
str(trainCapAveS)
names(getModelInfo())
str(preObj)
head(preObj)
head(preObj,1)
head(preObj,2)
data(segmentationData)
str(segmentationData)
str(trainCapAveS)
rm(list=ls())
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <- createResample(y=spam$type,times=10,
list=TRUE)
sapply(folds,length)
folds[[1]][1:10]
rm(list=ls())
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
str(training)
testdf<-training[ , grepl( "IL" , names( training ) ) ]
str(testdf)
testdf$TRAIL_R3<-NULL
str(testdf)
rm(testdf)
testdf<-training[ , grepl( "^IL" , names( training ) ) ]
str(testdf)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
rm(testdf)
preProc <- preProcess(log10(trainingIL[,-1]+1),method="pca",pcaComp=2)
str(spam)
trainingIL<-data.fram(training$diagnosis,trainingIL)
trainingIL<-data.frame(training$diagnosis,trainingIL)
str(trainingIL)
preProc <- preProcess(log10(trainingIL[,-1]+1),method="pca",pcaComp=12)
preProc <- preProcess(trainingIL[,-1],method="pca",pcaComp=12)
summary(preProc)
preProc
preProc$pcaComp
str(preProc)
?caret
?preProcess
preProc <- preProcess(trainingIL[,-1],method="pca",thresh=0.8)
preProc
preProc$numComp
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(training$diagnosis,trainingIL)
preProc <- preProcess(trainingIL[,-1],method="pca",thresh=0.8)
preProc$numcomp
str(trainingIL)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(training$diagnosis,trainingIL)
preProc <- preProcess(trainingIL[,-1],method="pca",thresh=0.8)
preProc$numComp
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
# trainingIL<-data.frame(training$diagnosis,trainingIL)
preProc <- preProcess(trainingIL,method="pca",thresh=0.8)
preProc$numComp
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
preProc <- preProcess(trainingIL,method="pca",thresh=0.9)
preProc$numComp
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
preProc <- preProcess(trainingIL,method="pca",thresh=0.5)
preProc$numComp
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
preProc <- preProcess(trainingIL,method="pca",thresh=0.8)
preProc$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pcaFit<-train(trainingIL$diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=trainingIL)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(training$diagnosis,trainingIL)
pcaFit<-train(trainingIL$diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=trainingIL)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(training$diagnosis,trainingIL)
str(trainingIL)
pcaFit<-train(trainingIL$training.diagnosis~.,method="glm",preProcess="pca",thresh=0.8,data=trainingIL)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(training$diagnosis,trainingIL)
str(trainingIL)
dummies<-dummyVars(trainingIL~training.diagnosis,data=trainingIL)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(training$diagnosis,trainingIL)
str(trainingIL)
dummies<-dummyVars(training.diagnosis~.,data=trainingIL)
head(predict(dummies,newdata=trainingIL))
modelFit <- train(trainingIL$training.diagnosis ~ .,method="glm",preProcess="pca",thresh=0.8,data=trainingIL)
confusionMatrix(trainingIL$training.diagnosis,predict(modelFit,testing))
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(diagnosis,trainingIL)
str(trainingIL)
trainingIL<-training[ , diagnosis,grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(diagnosis,trainingIL)
str(trainingIL)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Create a training data set consisting of only the predictors with variable names beginning
# with IL and the diagnosis.
trainingIL<-training[ , diagnosis,grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(diagnosis,trainingIL)
str(trainingIL)
trainingIL<-training[ , diagnosis,grepl( "^IL" , names( training ) ) ]
# trainingIL<-data.frame(diagnosis,trainingIL)
str(trainingIL)
trainingIL<-training[ , c(diagnosis,grepl( "^IL" , names( training ) )) ]
str(trainingIL)
rm(list=ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a
trainingIL<-data.frame(diagnosis,trainingIL)
trainingIL<-data.frame(trainingIL$diagnosis,trainingIL)
trainingIL<-training[ , grepl( "^IL" , names( training ) ) ]
trainingIL<-data.frame(trainingIL$diagnosis,trainingIL)
trainingIL<-data.frame(training$diagnosis,trainingIL)
str(trainingIL)
library(plyr)
rename(trainingIL, c("training.diagnosis"="diagnosis"))
str(trainingIL)
names(trainingIL)
str(trainingIL)
setwd("C:/Users/Mike/Rspace/JHU_DDP/first_deck")
install.packages("stringr")
devtools::install_github('muschellij2/slidify')
library(slidify)
slidify("index.Rmd")
library(knitr)
browseURL("Index.Rmd")
browseURL("Index.Rmd")
library(knitr)
browseURL("Index.Rmd")
browseURL("Index.Rmd")
?browseURL
slidify("index.Rmd")
browseURL("Index.Rmd")
browseURL("Index.Rmd")
browseURL("C:/Users/Mike/Rspace/JHU_DDP/first_deck/Index.Rmd")
publish_github(mbh038,JHU_DDP)
publish_github("mbh038","JHU_DDP")
framework   : dzslides        # {io2012, html5slides, shower, dzslides, ...}
fit <- lm(y ~ x1 + x2 + x3)
summary(fit)
```
